name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.22'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21, 1.22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        args: --timeout=5m --verbose

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run gosec security scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: results.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install tools
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install honnef.co/go/tools/cmd/ineffassign@latest
        go install github.com/kisielk/errcheck@latest

    - name: Check cyclomatic complexity
      run: |
        echo "Checking cyclomatic complexity..."
        gocyclo -over 15 ./internal/ || echo "High complexity functions found"

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Check for ineffectual assignments
      run: ineffassign ./...

    - name: Check for unchecked errors
      run: errcheck ./...

    - name: Check for unused code
      run: |
        go vet ./...
        go vet -composites=false ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for multiple platforms
      run: |
        mkdir -p build
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/goproxlb-linux-amd64 cmd/main.go
        GOOS=linux GOARCH=arm go build -ldflags="-s -w" -o build/goproxlb-linux-arm cmd/main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o build/goproxlb-linux-arm64 cmd/main.go

    - name: Install UPX
      run: |
        # Install UPX for binary compression
        wget -q https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz
        tar -xf upx-4.2.1-amd64_linux.tar.xz
        sudo mv upx-4.2.1-amd64_linux/upx /usr/local/bin/
        rm -rf upx-4.2.1-amd64_linux*

    - name: Compress binaries with UPX
      run: |
        echo "Compressing binaries with UPX..."
        upx --best --lzma build/goproxlb-linux-amd64
        upx --best --lzma build/goproxlb-linux-arm
        upx --best --lzma build/goproxlb-linux-arm64
        echo "Compression complete. Binary sizes:"
        ls -lh build/goproxlb-linux-*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: build/
        retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and cache Docker layers
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: goproxlb:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: go build -o goproxlb cmd/main.go

    - name: Test CLI help
      run: |
        ./goproxlb --help
        ./goproxlb start --help
        ./goproxlb status --help
        ./goproxlb cluster --help
        ./goproxlb vms --help
        ./goproxlb balance --help

    - name: Test with invalid config
      run: |
        ./goproxlb start --config nonexistent.yaml || true
        echo "Expected error for missing config file"

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for outdated dependencies
      run: |
        go list -u -m all
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "Dependencies need updating"
          git diff
          exit 1
        fi

    - name: Check for known vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found - review and update dependencies as needed"

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check license headers
      run: |
        # Check for license header in Go files
        find . -name "*.go" -not -path "./vendor/*" | xargs grep -L "Copyright" || echo "Some files may be missing copyright headers"
        
        # Check for LICENSE file
        if [ ! -f "LICENSE" ]; then
          echo "LICENSE file not found"
          exit 1
        fi
