name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'
  CGO_ENABLED: 0

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build for multiple platforms
      run: |
        mkdir -p build
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ env.VERSION }}" -o build/goproxlb-linux-amd64 cmd/main.go
        
        # Linux ARM
        GOOS=linux GOARCH=arm go build -ldflags="-s -w -X main.Version=${{ env.VERSION }}" -o build/goproxlb-linux-arm cmd/main.go
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ env.VERSION }}" -o build/goproxlb-linux-arm64 cmd/main.go

    - name: Verify binaries
      run: |
        echo "Built binaries:"
        ls -lh build/
        file build/goproxlb-*

    - name: Install UPX
      run: |
        # Install UPX for binary compression
        wget -q https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz
        tar -xf upx-4.2.1-amd64_linux.tar.xz
        sudo mv upx-4.2.1-amd64_linux/upx /usr/local/bin/
        rm -rf upx-4.2.1-amd64_linux*

    - name: Compress binaries with UPX
      run: |
        echo "Compressing binaries with UPX..."
        upx --best --lzma build/goproxlb-linux-amd64
        upx --best --lzma build/goproxlb-linux-arm
        upx --best --lzma build/goproxlb-linux-arm64
        echo "Compression complete. Binary sizes:"
        ls -lh build/goproxlb-linux-*

    - name: Generate SHA256 checksums
      run: |
        cd build
        sha256sum goproxlb-linux-amd64 > goproxlb-linux-amd64.sha256
        sha256sum goproxlb-linux-arm > goproxlb-linux-arm.sha256
        sha256sum goproxlb-linux-arm64 > goproxlb-linux-arm64.sha256
        cat *.sha256 > checksums.txt

    - name: Create release archive
      run: |
        cd build
        tar -czf goproxlb-${{ env.VERSION }}-linux-amd64.tar.gz goproxlb-linux-amd64 goproxlb-linux-amd64.sha256
        tar -czf goproxlb-${{ env.VERSION }}-linux-arm.tar.gz goproxlb-linux-arm goproxlb-linux-arm.sha256
        tar -czf goproxlb-${{ env.VERSION }}-linux-arm64.tar.gz goproxlb-linux-arm64 goproxlb-linux-arm64.sha256

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/goproxlb-${{ env.VERSION }}-linux-amd64.tar.gz
          build/goproxlb-${{ env.VERSION }}-linux-arm.tar.gz
          build/goproxlb-${{ env.VERSION }}-linux-arm64.tar.gz
          build/checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: true

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/cblomart/goproxlb
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern=latest,enable={{is_default_branch}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ env.VERSION }}

  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_TAG=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

    - name: Wait for image availability
      run: |
        echo "Waiting for Docker image to be available for security scanning..."
        echo "Looking for image: ghcr.io/cblomart/goproxlb:$VERSION_TAG"
        for i in {1..30}; do
          if docker manifest inspect ghcr.io/cblomart/goproxlb:$VERSION_TAG > /dev/null 2>&1; then
            echo "Image is available for scanning!"
            break
          fi
          echo "Attempt $i/30: Image not yet available, waiting 10 seconds..."
          sleep 10
        done

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/cblomart/goproxlb:${{ env.VERSION_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker]
    if: always()
    steps:
    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Notify on success
      if: needs.release.result == 'success' && needs.docker.result == 'success'
      run: |
        echo "‚úÖ Release ${{ env.VERSION }} created successfully!"
        echo "üì¶ Binaries: https://github.com/cblomart/GoProxLB/releases/tag/${{ env.VERSION }}"
        echo "üê≥ Docker: ghcr.io/cblomart/goproxlb:${{ env.VERSION }}"

    - name: Notify on failure
      if: needs.release.result == 'failure' || needs.docker.result == 'failure'
      run: |
        echo "‚ùå Release ${{ env.VERSION }} failed!"
        echo "Check the logs for more details."
